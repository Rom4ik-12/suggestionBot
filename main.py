import logging
import asyncio
import dotenv
import os
from flask import Flask
from threading import Thread
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)

app = Flask(__name__)

dotenv.load_dotenv()

# ================== –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó ENV ==================
TOKEN = os.getenv('TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '6617541179').split(',')))
TARGET_CHAT_ID = int(os.getenv('TARGET_CHAT_ID', '-1002390894383'))

# –¢–µ–∫—Å—Ç—ã –∏–∑ env –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TEXTS = {
    "must_join": os.getenv('TEXT_MUST_JOIN', "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ."),
    "start": os.getenv('TEXT_START', "üì§ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç!.\n"
             "–ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."),
    "sent_for_review": os.getenv('TEXT_SENT_FOR_REVIEW', "‚è≥ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è!"),
    "approved": os.getenv('TEXT_APPROVED', "‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!"),
    "rejected": os.getenv('TEXT_REJECTED', "‚ùå –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."),
}

# –•—ç—à—Ç–µ–≥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
PUBLICATION_HASHTAG = os.getenv('PUBLICATION_HASHTAG', '#–í–∞—à–∏_—Å–∫—Ä–∏–Ω—à–æ—Ç—ã')

# ======================================================


@app.route("/")
def home():
    return "Bot is running!"

def run_flask():
    port = int(os.getenv("PORT", 5000))  # Render –≤—Å–µ–≥–¥–∞ –∑–∞–¥–∞—ë—Ç PORT
    app.run(host="0.0.0.0", port=port)

# –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–æ–∫
pending_approvals = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞
async def is_member(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(TARGET_CHAT_ID, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        return False

# ==== Handlers ====
router = Router()

@router.message(Command("start"))
async def start_cmd(message: Message, bot: Bot):
    if not await is_member(bot, message.from_user.id):
        await message.answer(TEXTS["must_join"])
        return
    await message.answer(TEXTS["start"])


@router.message(F.photo)
async def handle_photo(message: Message, bot: Bot):
    if not await is_member(bot, message.from_user.id):
        await message.answer(TEXTS["must_join"])
        return

    photo = message.photo[-1].file_id
    caption = message.caption or ""

    pending_id = message.message_id
    pending_approvals[pending_id] = {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "photo": photo,
        "caption": caption
    }

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{pending_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{pending_id}")
            ]
        ]
    )

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_photo(
                chat_id=admin_id,
                photo=photo,
                caption=f"–û—Ç: @{message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {caption}",
                reply_markup=kb
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer(
        TEXTS["sent_for_review"],
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="/start")]],
            resize_keyboard=True
        )
    )


@router.callback_query(F.data.startswith("approve_") | F.data.startswith("reject_"))
async def button_callback(query: CallbackQuery, bot: Bot):
    action, pending_id = query.data.split("_")
    pending_id = int(pending_id)

    data = pending_approvals.get(pending_id)
    if not data:
        await query.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        return

    if query.from_user.id not in ADMIN_IDS:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    if not await is_member(bot, data["user_id"]):
        await query.message.edit_caption("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É!")
        del pending_approvals[pending_id]
        return

    if action == "approve":
        try:
            await bot.send_photo(
                chat_id=TARGET_CHAT_ID,
                photo=data["photo"],
                caption=f"{data['caption']}\n\n{PUBLICATION_HASHTAG}\n\n–ü—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: @{(await bot.get_me()).username}"
            )
            await bot.send_message(data["user_id"], TEXTS["approved"])
            result_text = "‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: –û–¥–æ–±—Ä–µ–Ω–æ"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            await query.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!")
            return
    else:
        try:
            await bot.send_message(data["user_id"], TEXTS["rejected"])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        result_text = "‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"

    del pending_approvals[pending_id]

    # –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
    try:
        await query.message.edit_caption(result_text)
    except:
        # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ ‚Üí –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.answer(result_text)


# ==== RUN ====
async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":

    Thread(target=run_flask).start()
    
    asyncio.run(main())